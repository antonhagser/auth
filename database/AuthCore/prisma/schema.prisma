datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "cargo prisma"
    output   = "../../../services/authcore/src/models/prisma.rs"
}

model User {
    id BigInt @id @unique

    emailAddress EmailAddress?

    // Auth methods
    externalUsers ExternalUser[]

    passwordEnabled Boolean    @default(false)
    basicAuth       BasicAuth?

    // 2FA methods
    TOTPEnabled Boolean @default(false)
    TOTP        TOTP?

    lastLoginAt DateTime?
    lastLoginIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userTokens   UserToken[]
    userMetadata UserMetadata[]

    // Cross service references
    replicatedApplication   ReplicatedApplication @relation(fields: [replicatedApplicationID], references: [applicationID], onDelete: Cascade)
    replicatedApplicationID BigInt

    @@index([id, replicatedApplicationID])
}

model EmailAddress {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    replicatedApplication   ReplicatedApplication @relation(fields: [replicatedApplicationID], references: [applicationID], onDelete: Cascade)
    replicatedApplicationID BigInt

    email_address String

    verified   Boolean   @default(false)
    verifiedAt DateTime?
    verifiedIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email_address, replicatedApplicationID], name: "Unique_EmailAddress_ApplicationID")
}

model ExternalUser {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    provider       String
    providerUserID String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BasicAuth {
    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @id @unique

    // Email is found in EmailAddress in parent User model
    password_hash String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// TOTP contains the TOTP secret for TOTP.
model TOTP {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    secret   String
    interval Int    @default(30)

    TOTPBackupCode TOTPBackupCode[]

    createdAt DateTime @default(now())
}

// TOTPBackupCode contains the backup codes for TOTP.
model TOTPBackupCode {
    id BigInt @id @unique

    code    String
    expired Boolean @default(false)

    TOTP   TOTP   @relation(fields: [TOTPID], references: [id], onDelete: Cascade)
    TOTPID BigInt

    createdAt DateTime @default(now())
}

enum UserTokenType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
    REFRESH
    TOTP_FLOW
}

model UserToken {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    tokenType UserTokenType
    token     String        @unique

    ipAddress String?
    userAgent String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime

    @@index([token])
}

model UserMetadata {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    key   String
    value String

    @@index([key])
}

// ReplicatedApplication is a cross service reference, it exists to avoid unnecessary requests across services.
model ReplicatedApplication {
    applicationID BigInt @id @unique

    User User[]

    basicAuthEnabled   Boolean             @default(true)
    basicAuthConfig    BasicAuthConfig? // Enforced to exist by Authcore
    VerificationConfig VerificationConfig? // Enforced to exist by Authcore

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    EmailAddress EmailAddress[]

    domainName String

    @@index([applicationID])
}

model BasicAuthConfig {
    applicationID BigInt                @id @unique
    application   ReplicatedApplication @relation(fields: [applicationID], references: [applicationID], onDelete: Cascade)

    minPasswordLength Int @default(8)
    maxPasswordLength Int @default(128)

    enablePasswordStrengthCheck Boolean @default(true)
    zxcvbnMinScore              Int     @default(2)

    enableStrictPassword Boolean @default(false)
    minUppercase         Int     @default(0)
    minLowercase         Int     @default(0)
    minNumbers           Int     @default(0)
    minSymbols           Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum EmailVerificationType {
    EMAIL_VERIFICATION_TYPE_NONE
    EMAIL_VERIFICATION_TYPE_LINK
    EMAIL_VERIFICATION_TYPE_CODE
}

model VerificationConfig {
    applicationID BigInt                @id @unique
    application   ReplicatedApplication @relation(fields: [applicationID], references: [applicationID], onDelete: Cascade)

    emailRedirectURL        String?
    expiresAfter            Int                   @default(86400) // 24 hours (in seconds)
    emailVerificationType   EmailVerificationType @default(EMAIL_VERIFICATION_TYPE_LINK)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "cargo prisma"
    output   = "../../../authcore-service/src/models/prisma.rs"
}

model User {
    id BigInt @id @unique

    firstName String?
    lastName  String?

    emailAddress EmailAddress?

    externalUsers   ExternalUser[]
    basicAuth       BasicAuth?
    passwordEnabled Boolean        @default(false)

    lastLoginAt DateTime?
    lastLoginIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessions     Session[]
    userTokens   UserToken[]
    userMetadata UserMetadata[]

    application   Application @relation(fields: [applicationID], references: [id], onDelete: Cascade)
    applicationID BigInt      @unique

    @@index([firstName, lastName])
}

model EmailAddress {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    email_address String @unique

    verified   Boolean   @default(false)
    verifiedAt DateTime?
    verifiedIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email_address])
}

model ExternalUser {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    provider       String
    providerUserID String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BasicAuth {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    username      String @unique
    password_hash String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    token String @unique

    blacklisted   Boolean   @default(false)
    blacklistedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserTokenType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

model UserToken {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    tokenType UserTokenType
    token     String        @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([token])
}

model UserMetadata {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    key   String
    value String

    @@index([key])
}

model Application {
    id BigInt @id @unique

    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    applicationMetadata ApplicationMetadata[]

    users          User[]
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId BigInt?

    @@index([name])
}

model ApplicationMetadata {
    id BigInt @id @unique

    application   Application @relation(fields: [applicationID], references: [id], onDelete: Cascade)
    applicationID BigInt      @unique

    key   String
    value String

    @@index([key])
}

model Organization {
    id BigInt @id @unique

    name String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    applications       Application[]
    OrganizationMember OrganizationMember?

    @@index([name])
}

enum OrganizationMemberRole {
    ADMIN
    MEMBER
}

model OrganizationMember {
    id BigInt @id @unique

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId BigInt       @unique

    role OrganizationMemberRole

    @@index([organizationId])
}

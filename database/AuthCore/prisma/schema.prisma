datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "cargo prisma"
    output   = "../../../services/authcore/src/models/prisma.rs"
}

model User {
    id BigInt @id @unique

    username  String?
    firstName String?
    lastName  String?

    emailAddress EmailAddress?

    externalUsers   ExternalUser[]
    basicAuth       BasicAuth?
    passwordEnabled Boolean        @default(false)

    lastLoginAt DateTime?
    lastLoginIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessions     Session[]
    userTokens   UserToken[]
    userMetadata UserMetadata[]

    // Cross service references
    replicatedApplication   ReplicatedApplication @relation(fields: [replicatedApplicationID], references: [applicationID])
    replicatedApplicationID BigInt

    @@unique([username, replicatedApplicationID], name: "Unique_Username_ApplicationID")
    @@index([username, firstName, lastName, replicatedApplicationID])
}

model EmailAddress {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    email_address String

    verified   Boolean   @default(false)
    verifiedAt DateTime?
    verifiedIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    applicationID BigInt

    @@index([email_address, applicationID], name: "Unique_EmailAddress_ApplicationID")
}

model ExternalUser {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    provider       String
    providerUserID String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BasicAuth {
    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @id @unique

    // Email is found in EmailAddress in parent User model
    username      String? @unique
    password_hash String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([username])
}

model Session {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    token String @unique

    blacklisted   Boolean   @default(false)
    blacklistedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserTokenType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

model UserToken {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    tokenType UserTokenType
    token     String        @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([token])
}

model UserMetadata {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    key   String
    value String

    @@index([key])
}

// ReplicatedApplication is a cross service reference, it exists to avoid unnecessary requests across services.
model ReplicatedApplication {
    applicationID BigInt @id @unique

    User User[]

    basicAuthEnabled Boolean          @default(true)
    basicAuthConfig  BasicAuthConfig?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PasswordStrength {
    NONE
    WEAK
    AVERAGE
    STRONG
}

model BasicAuthConfig {
    applicationID BigInt                @id @unique
    application   ReplicatedApplication @relation(fields: [applicationID], references: [applicationID], onDelete: Cascade)

    passwordStrength PasswordStrength @default(WEAK)

    minPasswordLength Int @default(8)
    maxPasswordLength Int @default(128)

    enableStrictPassword Boolean @default(false)
    minUppercase         Int     @default(0)
    minLowercase         Int     @default(0)
    minNumbers           Int     @default(0)
    minSymbols           Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

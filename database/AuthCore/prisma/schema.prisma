datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "cargo prisma"
    output   = "../../../services/authcore/src/models/prisma.rs"
}

model User {
    id BigInt @id @unique

    username  String?
    firstName String?
    lastName  String?

    emailAddress EmailAddress?

    externalUsers   ExternalUser[]
    basicAuth       BasicAuth?
    passwordEnabled Boolean        @default(false)

    lastLoginAt DateTime?
    lastLoginIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessions     Session[]
    userTokens   UserToken[]
    userMetadata UserMetadata[]

    // Cross service references
    applicationID BigInt

    @@unique([username, applicationID], name: "Unique_Username_ApplicationID")
    @@index([firstName, lastName, applicationID])
}

model EmailAddress {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    email_address String

    verified   Boolean   @default(false)
    verifiedAt DateTime?
    verifiedIP String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    applicationID BigInt

    @@index([email_address, applicationID], name: "Unique_EmailAddress_ApplicationID")
}

model ExternalUser {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    provider       String
    providerUserID String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BasicAuth {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    username      String @unique
    password_hash String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([username])
}

model Session {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    token String @unique

    blacklisted   Boolean   @default(false)
    blacklistedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserTokenType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

model UserToken {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt

    tokenType UserTokenType
    token     String        @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([token])
}

model UserMetadata {
    id BigInt @id @unique

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID BigInt @unique

    key   String
    value String

    @@index([key])
}
